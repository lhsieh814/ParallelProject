package com.example.matrixmanipulation;

import java.util.Arrays;
import java.util.Random;

import android.graphics.Bitmap;

public class Utilities {
    
    public static int[][] generateMatrix(int size){
    	int[][] matrix = new int[size][size];
    	
    	for(int i =0;i<size; i++){
    		for(int j = 0 ; j<size; j++){
    			Random r = new Random();
    			
    			matrix[i][j] = r.nextInt()%10;
    		}
    	}
    	
    	return matrix;
    }
    
    public static int[][] flipHorizontally(int[][] matrix){
    	int size = matrix.length;
    	
    	int[][] result = new int[size][size];
    	
    	for(int i =0 ;i<size; i++){
    		for(int j =0; j<size; j++){
    			result[i][j] = matrix[i][size-1-j];
    		}
    	}
    	
    	return result;
    }
    
    
    public static int[][] flipVertically(int[][] matrix){
    	int size = matrix.length;
    	
    	int[][] result = new int[size][size];
    	
    	for(int i =0 ;i<size; i++){
    		for(int j =0; j<size; j++){
    			result[i][j] = matrix[size-1-i][j];
    		}
    	}
    	return result;
    }
    
    public static int[][] rotateClockWise(int[][] matrix){
    	int size = matrix.length;
    	
    	int[][] result = new int[size][size];
    	
    	for(int i =0; i<size; i++){
    		for(int j=0; j<size; j++){
    			result[size-1-j][size-1-i] = matrix[i][j];
    		}
    	}
    	
    	return result;
    }
    
    
    public static int[][] rotateCounterClockWise(int[][] matrix){
    	int size = matrix.length;
    	
    	int[][] result = new int[size][size];
    	
    	for(int i=0; i<size; i++){
    		for(int j=0; j<size; j++){
    			result[j][i] = matrix[i][j];
    		}
    	}
    	
    	
    	return result;
    }
    
    public static int[][] sort(int[][] matrix){
    	int size =matrix.length;
    	
    	int[][] result = new int[size][size];
    	
    	for(int i=0; i<size; i++){
    		for(int j=0; j<size; j++){
    			result[i][j] = matrix[i][j];
    		}
    	}
    	
    	//sort
    	for(int i=0; i<size; i++){
    		Arrays.sort(result[i]);
    	}
    	
    	return result;
    }
    
    public static int[][] removeColor(int[][] matrix, int color){
    	int size =matrix.length;
    	
    	int[][] result = new int[size][size];
    	
    	for(int i=0; i<size; i++){
    		for(int j=0; j<size; j++){
    			int cur = matrix[i][j];
    			if(cur==color){
    				result[i][j] = 0;
    			}
    			else{
    				result[i][j] = cur;
    			}
    		}
    	}
    	return result;
    }
    
    public static int[][] convertMapToArray(Bitmap map){
    	int width =map.getWidth();
    	int height = map.getHeight();
    	int[][] result = new int[height][width];
    	
    	for(int i=0; i<height; i++){
    		for(int j=0; j<width; j++){
    			result[i][j]=map.getPixel(j, i);
    		}
    	}
    	return result;
    	
    }
    
    public static Bitmap convertArrayToMap(int[][] array){
    	
    	Bitmap.Config conf = Bitmap.Config.ARGB_8888; // see other conf types
    	Bitmap bmp = Bitmap.createBitmap(array[0].length, array.length, conf);
    	
    	for(int i=0; i<array.length; i++){
    		for(int j=0; j<array[0].length; j++){
    			bmp.setPixel(j, i, array[i][j]);
    		}
    	}
    	return bmp;
    }
    
    public static void dothings(int[][] matrix, boolean flipH, boolean flipV, boolean rotateCW, boolean rotateCCW, boolean sort, boolean serial){
    	if(flipH){
    		if(serial){
    			matrix=flipHorizontally(matrix);
    		}
    		else{
    			
    		}
    	}
    }
    
}
